// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrations.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    partial class MigrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Thavyra.Data.Models.ApplicationDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecretHash")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("client_secret_hash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ApplicationPermissionDto", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("ApplicationId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("application_permissions");
                });

            modelBuilder.Entity("Thavyra.Data.Models.AuthorizationDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Status")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("status");

                    b.Property<Guid?>("Subject")
                        .HasColumnType("uuid")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("authorizations");
                });

            modelBuilder.Entity("Thavyra.Data.Models.AuthorizationScopeDto", b =>
                {
                    b.Property<Guid>("AuthorizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_id");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uuid")
                        .HasColumnName("scope_id");

                    b.HasKey("AuthorizationId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("authorization_scopes");
                });

            modelBuilder.Entity("Thavyra.Data.Models.LoginAttemptDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("uuid")
                        .HasColumnName("login_id");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("boolean")
                        .HasColumnName("succeeded");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("login_attempts");
                });

            modelBuilder.Entity("Thavyra.Data.Models.LoginDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProviderAccountId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_account_id");

                    b.Property<string>("ProviderAvatarUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("provider_avatar_url");

                    b.Property<string>("ProviderUsername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider_username");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProviderAccountId")
                        .IsUnique();

                    b.HasIndex("ProviderUsername");

                    b.HasIndex("UserId");

                    b.ToTable("logins");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ObjectiveDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Name");

                    b.ToTable("objectives");
                });

            modelBuilder.Entity("Thavyra.Data.Models.PermissionDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("uuid")
                        .HasColumnName("scope_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScopeId")
                        .IsUnique();

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08b20d00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Sudo",
                            Name = "scp:sudo",
                            ScopeId = new Guid("08b20000-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b20e00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Admin",
                            Name = "scp:admin",
                            ScopeId = new Guid("08b20100-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b22800-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Link Provider",
                            Name = "scp:link_provider",
                            ScopeId = new Guid("08b22700-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b20f00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Full Account Access",
                            Name = "scp:account",
                            ScopeId = new Guid("08b20200-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21000-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Profile",
                            Name = "scp:account.profile",
                            ScopeId = new Guid("08b20300-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21100-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Read Profile",
                            Name = "scp:account.profile.read",
                            ScopeId = new Guid("08b20400-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21200-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Read Transactions",
                            Name = "scp:account.transactions",
                            ScopeId = new Guid("08b20500-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21300-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Logins",
                            Name = "scp:account.logins",
                            ScopeId = new Guid("08b20600-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21400-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Applications",
                            Name = "scp:applications",
                            ScopeId = new Guid("08b20700-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21500-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "View Applications",
                            Name = "scp:applications.read",
                            ScopeId = new Guid("08b20800-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21600-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Authorizations",
                            Name = "scp:authorizations",
                            ScopeId = new Guid("08b20900-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21700-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Read Authorizations",
                            Name = "scp:authorizations.read",
                            ScopeId = new Guid("08b20a00-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21800-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Transactions",
                            Name = "scp:transactions",
                            ScopeId = new Guid("08b20b00-d3a2-d85e-42d1-08dce1858470")
                        },
                        new
                        {
                            Id = new Guid("08b21900-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Authorization",
                            Name = "ept:authorization"
                        },
                        new
                        {
                            Id = new Guid("08b21a00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Token",
                            Name = "ept:token"
                        },
                        new
                        {
                            Id = new Guid("08b21b00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Logout",
                            Name = "ept:logout"
                        },
                        new
                        {
                            Id = new Guid("08b21c00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Implicit",
                            Name = "cst:implicit"
                        },
                        new
                        {
                            Id = new Guid("08b21d00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Code",
                            Name = "rst:code"
                        },
                        new
                        {
                            Id = new Guid("08b21e00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Id Token",
                            Name = "rst:id_token"
                        },
                        new
                        {
                            Id = new Guid("08b22400-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "None",
                            Name = "rst:none"
                        },
                        new
                        {
                            Id = new Guid("08b21f00-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Authorization Code",
                            Name = "gt:authorization_code"
                        },
                        new
                        {
                            Id = new Guid("08b22000-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Client Credentials",
                            Name = "gt:client_credentials"
                        },
                        new
                        {
                            Id = new Guid("08b22100-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Refresh Token",
                            Name = "gt:refresh_token"
                        },
                        new
                        {
                            Id = new Guid("08b22200-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Implicit",
                            Name = "gt:implicit"
                        });
                });

            modelBuilder.Entity("Thavyra.Data.Models.RedirectDto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("uri");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Uri");

                    b.ToTable("redirects");
                });

            modelBuilder.Entity("Thavyra.Data.Models.RoleDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08b22300-d3a2-d85e-42d1-08dce1858470"),
                            DisplayName = "Admin",
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Thavyra.Data.Models.ScopeDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("scopes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08b20000-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Perform privileged operations.",
                            DisplayName = "Sudo",
                            Name = "sudo"
                        },
                        new
                        {
                            Id = new Guid("08b20100-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Perform administrator operations.",
                            DisplayName = "Admin",
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("08b22700-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Link a third party login provider to your account.",
                            DisplayName = "Link Provider",
                            Name = "link_provider"
                        },
                        new
                        {
                            Id = new Guid("08b20200-d3a2-d85e-42d1-08dce1858470"),
                            Description = "View, manage and delete your profile, logins and account.",
                            DisplayName = "Full Account Access",
                            Name = "account"
                        },
                        new
                        {
                            Id = new Guid("08b20300-d3a2-d85e-42d1-08dce1858470"),
                            Description = "View and modify your profile and avatar.",
                            DisplayName = "Profile",
                            Name = "account.profile"
                        },
                        new
                        {
                            Id = new Guid("08b20400-d3a2-d85e-42d1-08dce1858470"),
                            Description = "View your profile and avatar.",
                            DisplayName = "View Profile",
                            Name = "account.profile.read"
                        },
                        new
                        {
                            Id = new Guid("08b20500-d3a2-d85e-42d1-08dce1858470"),
                            Description = "View transactions sent to your virtual balance.",
                            DisplayName = "View Transactions",
                            Name = "account.transactions"
                        },
                        new
                        {
                            Id = new Guid("08b20600-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Manage your logins and change your password.",
                            DisplayName = "Logins",
                            Name = "account.logins"
                        },
                        new
                        {
                            Id = new Guid("08b20700-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Manage your OAuth applications.",
                            DisplayName = "Applications",
                            Name = "applications"
                        },
                        new
                        {
                            Id = new Guid("08b20800-d3a2-d85e-42d1-08dce1858470"),
                            Description = "View your OAuth applications.",
                            DisplayName = "View Applications",
                            Name = "applications.read"
                        },
                        new
                        {
                            Id = new Guid("08b20900-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Manage your authorized third party apps.",
                            DisplayName = "Authorizations",
                            Name = "authorizations"
                        },
                        new
                        {
                            Id = new Guid("08b20a00-d3a2-d85e-42d1-08dce1858470"),
                            Description = "View your authorized third party apps.",
                            DisplayName = "Read Authorizations",
                            Name = "authorizations.read"
                        },
                        new
                        {
                            Id = new Guid("08b20b00-d3a2-d85e-42d1-08dce1858470"),
                            Description = "Send transactions and view your virtual balance.",
                            DisplayName = "Transactions",
                            Name = "transactions"
                        });
                });

            modelBuilder.Entity("Thavyra.Data.Models.ScoreDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("UserId");

                    b.ToTable("scores");
                });

            modelBuilder.Entity("Thavyra.Data.Models.SystemDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("system");
                });

            modelBuilder.Entity("Thavyra.Data.Models.TokenDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<Guid?>("AuthorizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorization_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Payload")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("RedeemedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("redeemed_at");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("reference_id");

                    b.Property<string>("Status")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("status");

                    b.Property<Guid?>("Subject")
                        .HasColumnType("uuid")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("Thavyra.Data.Models.TransactionDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<Guid?>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_id");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SubjectId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Thavyra.Data.Models.UserDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Thavyra.Data.Models.UserRoleDto", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ApplicationDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.UserDto", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ApplicationPermissionDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thavyra.Data.Models.PermissionDto", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thavyra.Data.Models.AuthorizationDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Thavyra.Data.Models.AuthorizationScopeDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.AuthorizationDto", null)
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thavyra.Data.Models.ScopeDto", null)
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thavyra.Data.Models.LoginAttemptDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.LoginDto", "Login")
                        .WithMany("Attempts")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Thavyra.Data.Models.LoginDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.UserDto", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ObjectiveDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", "Application")
                        .WithMany("Objectives")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Thavyra.Data.Models.PermissionDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ScopeDto", "Scope")
                        .WithOne("Permission")
                        .HasForeignKey("Thavyra.Data.Models.PermissionDto", "ScopeId");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Thavyra.Data.Models.RedirectDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", "Application")
                        .WithMany("Redirects")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ScoreDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ObjectiveDto", "Objective")
                        .WithMany("Scores")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thavyra.Data.Models.UserDto", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thavyra.Data.Models.SystemDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Thavyra.Data.Models.TokenDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Thavyra.Data.Models.AuthorizationDto", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Thavyra.Data.Models.TransactionDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.ApplicationDto", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thavyra.Data.Models.UserDto", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("Thavyra.Data.Models.UserDto", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Recipient");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Thavyra.Data.Models.UserRoleDto", b =>
                {
                    b.HasOne("Thavyra.Data.Models.RoleDto", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thavyra.Data.Models.UserDto", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Thavyra.Data.Models.ApplicationDto", b =>
                {
                    b.Navigation("Objectives");

                    b.Navigation("Redirects");
                });

            modelBuilder.Entity("Thavyra.Data.Models.AuthorizationDto", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Thavyra.Data.Models.LoginDto", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ObjectiveDto", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Thavyra.Data.Models.ScopeDto", b =>
                {
                    b.Navigation("Permission");
                });
#pragma warning restore 612, 618
        }
    }
}
